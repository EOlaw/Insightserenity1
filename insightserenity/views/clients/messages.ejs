<!-- views/clients/messages.ejs -->
<% layout('layouts/dashboard') -%>
<% block('title', 'Messages - InsightSerenity') -%>

<div class="mb-6">
  <h1 class="text-2xl font-bold mb-2">Messages</h1>
  <p class="text-gray-600">Communicate with consultants and manage your conversations</p>
</div>

<% if (success && success.length > 0) { %>
  <div class="bg-green-50 border-l-4 border-green-400 p-4 mb-6">
    <div class="flex">
      <div class="flex-shrink-0">
        <svg class="h-5 w-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
        </svg>
      </div>
      <div class="ml-3">
        <p class="text-sm text-green-700"><%= success %></p>
      </div>
    </div>
  </div>
<% } %>

<% if (error && error.length > 0) { %>
  <div class="bg-red-50 border-l-4 border-red-400 p-4 mb-6">
    <div class="flex">
      <div class="flex-shrink-0">
        <svg class="h-5 w-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
        </svg>
      </div>
      <div class="ml-3">
        <p class="text-sm text-red-700"><%= error %></p>
      </div>
    </div>
  </div>
<% } %>

<div class="flex flex-col lg:flex-row h-[calc(100vh-200px)] min-h-[500px]">
  <!-- Conversation List -->
  <div class="w-full lg:w-1/3 lg:mr-6 mb-6 lg:mb-0 bg-white rounded-lg shadow-sm overflow-hidden flex flex-col">
    <div class="p-4 border-b">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-semibold text-gray-800">Conversations</h3>
        <div class="relative">
          <input type="text" id="search-conversations" placeholder="Search..." class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm focus:ring-primary focus:border-primary">
          <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
            <svg class="h-4 w-4 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
        </div>
      </div>
      
      <div class="flex items-center justify-between mb-2">
        <div class="flex space-x-2">
          <button type="button" data-filter="all" class="conversation-filter px-3 py-1 text-xs font-medium rounded-full bg-gray-100 text-gray-800 active">All</button>
          <button type="button" data-filter="unread" class="conversation-filter px-3 py-1 text-xs font-medium rounded-full hover:bg-gray-100 text-gray-600">Unread</button>
        </div>
        <button type="button" id="new-message-btn" class="inline-flex items-center px-2 py-1 border border-transparent rounded text-xs font-medium text-primary hover:text-primary-dark focus:outline-none">
          <svg class="h-4 w-4 mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
          </svg>
          New Message
        </button>
      </div>
    </div>
    
    <div class="overflow-y-auto flex-grow">
      <% if (conversations && conversations.length > 0) { %>
        <ul class="divide-y divide-gray-200" id="conversation-list">
          <% conversations.forEach(conversation => { %>
            <li>
              <a href="/api/clients/messages/<%= conversation._id %>" class="block hover:bg-gray-50 <%= activeConversation && activeConversation._id.toString() === conversation._id.toString() ? 'bg-primary-light' : '' %>">
                <div class="px-4 py-4 flex items-center">
                  <div class="flex-shrink-0 relative">
                    <div class="h-10 w-10 rounded-full overflow-hidden bg-gray-200">
                      <% if (conversation.otherParticipant && conversation.otherParticipant.avatarUrl) { %>
                        <img src="<%= conversation.otherParticipant.avatarUrl %>" alt="<%= conversation.otherParticipant.name %>" class="h-10 w-10 object-cover">
                      <% } else { %>
                        <div class="w-full h-full flex items-center justify-center bg-primary text-dark text-sm font-bold">
                          <%= conversation.otherParticipant ? conversation.otherParticipant.name.charAt(0) : '?' %>
                        </div>
                      <% } %>
                    </div>
                    <% if (conversation.unreadCount > 0) { %>
                      <span class="absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center rounded-full bg-primary text-dark text-xs font-medium"><%= conversation.unreadCount > 9 ? '9+' : conversation.unreadCount %></span>
                    <% } %>
                  </div>
                  <div class="ml-3 flex-grow min-w-0">
                    <div class="flex items-center justify-between">
                      <p class="text-sm font-medium text-gray-900 truncate"><%= conversation.otherParticipant ? conversation.otherParticipant.name : 'Unknown' %></p>
                      <p class="text-xs text-gray-500"><%= new Date(conversation.lastMessageAt).toLocaleDateString() %></p>
                    </div>
                    <div class="flex items-center justify-between">
                      <p class="text-xs text-gray-500 truncate"><%= conversation.project ? conversation.project.title : 'No project' %></p>
                      <% if (conversation.lastMessageBy === user._id.toString()) { %>
                        <% if (conversation.lastMessageRead) { %>
                          <svg class="h-3 w-3 text-blue-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118l-2.8-2.034c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                          </svg>
                        <% } else { %>
                          <svg class="h-3 w-3 text-gray-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118l-2.8-2.034c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                          </svg>
                        <% } %>
                      <% } %>
                    </div>
                  </div>
                </div>
              </a>
            </li>
          <% }) %>
        </ul>
      <% } else { %>
        <div class="p-8 text-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
          </svg>
          <h3 class="text-base font-medium text-gray-900 mb-1">No conversations yet</h3>
          <p class="text-sm text-gray-500 mb-3">Start a conversation with a consultant</p>
          <button type="button" id="empty-new-message-btn" class="inline-flex items-center px-3 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-dark bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
            <svg class="h-4 w-4 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
            </svg>
            New Message
          </button>
        </div>
      <% } %>
    </div>
  </div>

  <!-- Message Content Area -->
  <div class="w-full lg:w-2/3 bg-white rounded-lg shadow-sm overflow-hidden flex flex-col relative">
    <% if (activeConversation) { %>
      <!-- Conversation Header -->
      <div class="p-4 border-b flex items-center justify-between">
        <div class="flex items-center">
          <div class="h-10 w-10 rounded-full overflow-hidden bg-gray-200 mr-3">
            <% if (activeConversation.otherParticipant && activeConversation.otherParticipant.avatarUrl) { %>
              <img src="<%= activeConversation.otherParticipant.avatarUrl %>" alt="<%= activeConversation.otherParticipant.name %>" class="h-10 w-10 object-cover">
            <% } else { %>
              <div class="w-full h-full flex items-center justify-center bg-primary text-dark text-sm font-bold">
                <%= activeConversation.otherParticipant ? activeConversation.otherParticipant.name.charAt(0) : '?' %>
              </div>
            <% } %>
          </div>
          <div>
            <h3 class="text-base font-medium text-gray-900"><%= activeConversation.otherParticipant ? activeConversation.otherParticipant.name : 'Unknown' %></h3>
            <p class="text-xs text-gray-500 flex items-center">
              <% if (activeConversation.project) { %>
                <span class="mr-1">Project:</span>
                <a href="/clients/projects/<%= activeConversation.project._id %>" class="text-primary hover:text-primary-dark truncate"><%= activeConversation.project.title %></a>
              <% } else { %>
                <span>No associated project</span>
              <% } %>
            </p>
          </div>
        </div>
        <div class="flex items-center">
          <button type="button" class="text-gray-400 hover:text-gray-500 focus:outline-none" id="conversation-options-btn">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z" />
            </svg>
          </button>
          <!-- Dropdown menu for conversation options -->
          <div id="conversation-options-menu" class="hidden absolute top-14 right-4 z-10 mt-2 w-48 bg-white rounded-md shadow-lg">
            <div class="py-1">
              <button type="button" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left">View Consultant Profile</button>
              <button type="button" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left">Mark All as Read</button>
              <button type="button" class="block px-4 py-2 text-sm text-red-600 hover:bg-gray-100 w-full text-left">Delete Conversation</button>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Message List -->
      <div class="flex-grow overflow-y-auto p-4" id="message-container">
        <% if (activeConversation.messages && activeConversation.messages.length > 0) { %>
          <% 
            let currentDate = null;
            activeConversation.messages.forEach((message, index) => {
              // Check if we need to show date header
              const messageDate = new Date(message.timestamp).toLocaleDateString();
              const showDateHeader = messageDate !== currentDate;
              if (showDateHeader) {
                currentDate = messageDate;
          %>
            <div class="flex justify-center mb-4">
              <div class="px-3 py-1 bg-gray-200 rounded-full text-xs text-gray-600">
                <%= messageDate %>
              </div>
            </div>
          <% } %>
          
          <div class="mb-4 <%= message.sender.toString() === user._id.toString() ? 'flex justify-end' : 'flex justify-start' %>">
            <div class="<%= message.sender.toString() === user._id.toString() ? 'bg-primary-light text-dark rounded-lg rounded-tr-none' : 'bg-gray-100 text-gray-800 rounded-lg rounded-tl-none' %> px-4 py-3 max-w-[75%]">
              <div class="<%= message.sender.toString() === user._id.toString() ? 'text-right' : '' %>">
                <span class="text-xs text-gray-500"><%= new Date(message.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) %></span>
              </div>
              <div class="text-sm whitespace-pre-wrap"><%= message.content %></div>
              <% if (message.sender.toString() === user._id.toString()) { %>
                <div class="text-right mt-1">
                  <% if (message.read) { %>
                    <span class="text-xs text-blue-500">Read</span>
                  <% } else { %>
                    <span class="text-xs text-gray-400">Delivered</span>
                  <% } %>
                </div>
              <% } %>
            </div>
          </div>
        <% }) %>
        <% } else { %>
          <div class="text-center py-8">
            <p class="text-gray-500">No messages yet. Start the conversation!</p>
          </div>
        <% } %>
      </div>
      
      <!-- Message Input -->
      <div class="border-t p-4">
        <form id="message-form" action="/api/messages/send" method="POST">
          <input type="hidden" name="conversationId" value="<%= activeConversation._id %>">
          <div class="flex">
            <div class="flex-grow">
              <textarea id="message-input" name="content" rows="1" class="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary resize-none" placeholder="Type your message..."></textarea>
            </div>
            <div class="ml-3 flex items-end">
              <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-dark bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z" />
                </svg>
              </button>
            </div>
          </div>
        </form>
      </div>
    <% } else { %>
      <!-- Empty State -->
      <div class="flex flex-col items-center justify-center flex-grow p-8 text-center">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
        </svg>
        <h3 class="text-lg font-medium text-gray-900 mb-2">Select a conversation</h3>
        <p class="text-gray-500 mb-4">Choose a conversation from the left or start a new one</p>
        <button type="button" id="select-new-message-btn" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-dark bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
          <svg class="h-5 w-5 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
          </svg>
          New Message
        </button>
      </div>
    <% } %>
  </div>
</div>

<!-- New Message Modal -->
<div id="new-message-modal" class="fixed inset-0 hidden overflow-y-auto z-50">
  <div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
    <div class="fixed inset-0 transition-opacity" aria-hidden="true">
      <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
    </div>

    <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
      <form action="/api/messages/create-conversation" method="POST" id="new-conversation-form">
        <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
          <div class="sm:flex sm:items-start">
            <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
              <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                New Message
              </h3>
              <div class="mt-4">
                <div class="mb-4">
                  <label for="recipient-type" class="block text-sm font-medium text-gray-700 mb-1">Message Type</label>
                  <div class="flex space-x-4">
                    <div class="flex items-center">
                      <input id="recipient-type-project" name="recipientType" type="radio" value="project" checked class="h-4 w-4 text-primary focus:ring-primary border-gray-300">
                      <label for="recipient-type-project" class="ml-2 block text-sm text-gray-700">Project-related</label>
                    </div>
                    <div class="flex items-center">
                      <input id="recipient-type-consultant" name="recipientType" type="radio" value="consultant" class="h-4 w-4 text-primary focus:ring-primary border-gray-300">
                      <label for="recipient-type-consultant" class="ml-2 block text-sm text-gray-700">Direct to Consultant</label>
                    </div>
                  </div>
                </div>
                
                <div id="project-selection" class="mb-4">
                  <label for="project-id" class="block text-sm font-medium text-gray-700 mb-1">Select Project</label>
                  <select id="project-id" name="projectId" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary">
                    <option value="" disabled selected>Select a project</option>
                    <!-- Projects will be populated dynamically -->
                  </select>
                  <p class="mt-1 text-xs text-gray-500">You'll need to create a project first if none are available</p>
                </div>
                
                <div id="consultant-selection" class="mb-4 hidden">
                  <label for="consultant-id" class="block text-sm font-medium text-gray-700 mb-1">Select Consultant</label>
                  <select id="consultant-id" name="consultantId" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary">
                    <option value="" disabled selected>Select a consultant</option>
                    <!-- Consultants will be populated dynamically -->
                  </select>
                  <p class="mt-1 text-xs text-gray-500">You'll need to save consultants first if none are available</p>
                </div>
                
                <div>
                  <label for="initial-message" class="block text-sm font-medium text-gray-700 mb-1">Message</label>
                  <textarea id="initial-message" name="initialMessage" rows="4" required class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary" placeholder="Type your message..."></textarea>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
          <button type="submit" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary text-base font-medium text-dark hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:ml-3 sm:w-auto sm:text-sm">
            Send Message
          </button>
          <button type="button" data-modal-close class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
            Cancel
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<% block('additionalJS', `
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Load projects and consultants data asynchronously
    const loadProjects = async () => {
      try {
        const response = await fetch('/api/clients/projects?format=json');
        const data = await response.json();
        
        if (data.success) {
          const projectSelect = document.getElementById('project-id');
          if (projectSelect && data.projects && data.projects.length > 0) {
            data.projects.forEach(project => {
              const option = document.createElement('option');
              option.value = project._id;
              option.textContent = project.title;
              projectSelect.appendChild(option);
            });
          }
        }
      } catch (error) {
        console.error('Error loading projects:', error);
      }
    };
    
    const loadConsultants = async () => {
      try {
        const response = await fetch('/api/clients/saved-consultants?format=json');
        const data = await response.json();
        
        if (data.success) {
          const consultantSelect = document.getElementById('consultant-id');
          if (consultantSelect && data.consultants && data.consultants.length > 0) {
            data.consultants.forEach(consultant => {
              const option = document.createElement('option');
              option.value = consultant.id;
              option.textContent = consultant.name;
              consultantSelect.appendChild(option);
            });
          }
        }
      } catch (error) {
        console.error('Error loading consultants:', error);
      }
    };
    
    // Load data when the new message modal is opened
    const newMessageBtns = document.querySelectorAll('#new-message-btn, #empty-new-message-btn, #select-new-message-btn');
    newMessageBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        loadProjects();
        loadConsultants();
      });
    });
    
    // Auto-resize textarea
    const messageInput = document.getElementById('message-input');
    if (messageInput) {
      messageInput.addEventListener('input', function() {
        this.style.height = 'auto';
        this.style.height = (this.scrollHeight) + 'px';
      });
    }
    
    // Scroll to bottom of message container
    const messageContainer = document.getElementById('message-container');
    if (messageContainer) {
      messageContainer.scrollTop = messageContainer.scrollHeight;
    }
    
    // Conversation filter buttons
    const filterButtons = document.querySelectorAll('.conversation-filter');
    const conversationItems = document.querySelectorAll('#conversation-list li');
    
    filterButtons.forEach(button => {
      button.addEventListener('click', function() {
        // Remove active class from all buttons
        filterButtons.forEach(btn => {
          btn.classList.remove('active', 'bg-gray-100', 'text-gray-800');
          btn.classList.add('hover:bg-gray-100', 'text-gray-600');
        });
        
        // Add active class to clicked button
        this.classList.add('active', 'bg-gray-100', 'text-gray-800');
        this.classList.remove('hover:bg-gray-100', 'text-gray-600');
        
        const filter = this.getAttribute('data-filter');
        
        if (filter === 'all') {
          conversationItems.forEach(item => {
            item.classList.remove('hidden');
          });
        } else if (filter === 'unread') {
          conversationItems.forEach(item => {
            const unreadBadge = item.querySelector('[class*="rounded-full bg-primary"]');
            if (unreadBadge) {
              item.classList.remove('hidden');
            } else {
              item.classList.add('hidden');
            }
          });
        }
      });
    });
    
    // Search conversations
    const searchInput = document.getElementById('search-conversations');
    if (searchInput) {
      searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase().trim();
        
        conversationItems.forEach(item => {
          const nameElement = item.querySelector('.text-sm.font-medium.text-gray-900');
          const projectElement = item.querySelector('.text-xs.text-gray-500.truncate');
          
          if (!nameElement && !projectElement) return;
          
          const name = nameElement ? nameElement.textContent.toLowerCase() : '';
          const project = projectElement ? projectElement.textContent.toLowerCase() : '';
          
          if (name.includes(searchTerm) || project.includes(searchTerm)) {
            item.classList.remove('hidden');
          } else {
            item.classList.add('hidden');
          }
        });
      });
    }
    
    // Conversation options dropdown
    const optionsBtn = document.getElementById('conversation-options-btn');
    const optionsMenu = document.getElementById('conversation-options-menu');
    
    if (optionsBtn && optionsMenu) {
      optionsBtn.addEventListener('click', function() {
        optionsMenu.classList.toggle('hidden');
      });
      
      // Close the dropdown when clicking outside
      document.addEventListener('click', function(event) {
        if (!optionsBtn.contains(event.target) && !optionsMenu.contains(event.target)) {
          optionsMenu.classList.add('hidden');
        }
      });
    }
    
    // New message modal
    const newMessageBtns = document.querySelectorAll('#new-message-btn, #empty-new-message-btn, #select-new-message-btn');
    const newMessageModal = document.getElementById('new-message-modal');
    const modalCloses = document.querySelectorAll('[data-modal-close]');
    
    newMessageBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        newMessageModal.classList.remove('hidden');
      });
    });
    
    modalCloses.forEach(close => {
      close.addEventListener('click', function() {
        newMessageModal.classList.add('hidden');
      });
    });
    
    // Close modals when clicking outside
    document.addEventListener('click', function(event) {
      if (event.target.classList.contains('fixed') && event.target.classList.contains('inset-0')) {
        event.target.classList.add('hidden');
      }
    });
    
    // Toggle between project and consultant message type
    const recipientTypeRadios = document.querySelectorAll('input[name="recipientType"]');
    const projectSelection = document.getElementById('project-selection');
    const consultantSelection = document.getElementById('consultant-selection');
    
    recipientTypeRadios.forEach(radio => {
      radio.addEventListener('change', function() {
        if (this.value === 'project') {
          projectSelection.classList.remove('hidden');
          consultantSelection.classList.add('hidden');
          document.getElementById('project-id').setAttribute('required', '');
          document.getElementById('consultant-id').removeAttribute('required');
        } else if (this.value === 'consultant') {
          projectSelection.classList.add('hidden');
          consultantSelection.classList.remove('hidden');
          document.getElementById('consultant-id').setAttribute('required', '');
          document.getElementById('project-id').removeAttribute('required');
        }
      });
    });
    
    // Form submission handling
    const messageForm = document.getElementById('message-form');
    if (messageForm) {
      messageForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const messageInput = document.getElementById('message-input');
        const content = messageInput.value.trim();
        
        if (!content) {
          return;
        }
        
        // Optimistically add message to UI
        const messageContainer = document.getElementById('message-container');
        const now = new Date();
        
        const messageTime = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        
        // Add date header if needed
        const currentDateStr = now.toLocaleDateString();
        let dateHeaderNeeded = true;
        
        const dateDivs = messageContainer.querySelectorAll('.px-3.py-1.bg-gray-200.rounded-full');
        dateDivs.forEach(div => {
          if (div.textContent.trim() === currentDateStr) {
            dateHeaderNeeded = false;
          }
        });
        
        if (dateHeaderNeeded) {
          const dateHeader = document.createElement('div');
          dateHeader.className = 'flex justify-center mb-4';
          dateHeader.innerHTML = \`
            <div class="px-3 py-1 bg-gray-200 rounded-full text-xs text-gray-600">
              \${currentDateStr}
            </div>
          \`;
          messageContainer.appendChild(dateHeader);
        }
        
        const messageElement = document.createElement('div');
        messageElement.className = 'mb-4 flex justify-end';
        messageElement.innerHTML = \`
          <div class="bg-primary-light text-dark rounded-lg rounded-tr-none px-4 py-3 max-w-[75%]">
            <div class="text-right">
              <span class="text-xs text-gray-500">\${messageTime}</span>
            </div>
            <div class="text-sm whitespace-pre-wrap">\${content}</div>
            <div class="text-right mt-1">
              <span class="text-xs text-gray-400">Sending...</span>
            </div>
          </div>
        \`;
        
        messageContainer.appendChild(messageElement);
        messageContainer.scrollTop = messageContainer.scrollHeight;
        
        // Reset form
        messageInput.value = '';
        messageInput.style.height = 'auto';
        
        // Submit the form via AJAX
        const formData = new FormData(this);
        
        fetch(this.action, {
          method: 'POST',
          body: formData,
          credentials: 'same-origin',
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Update the status to delivered
            const statusSpan = messageElement.querySelector('.text-xs.text-gray-400');
            if (statusSpan) {
              statusSpan.textContent = 'Delivered';
            }
          } else {
            // Show error message
            const statusSpan = messageElement.querySelector('.text-xs.text-gray-400');
            if (statusSpan) {
              statusSpan.textContent = 'Failed to send';
              statusSpan.classList.remove('text-gray-400');
              statusSpan.classList.add('text-red-500');
            }
          }
        })
        .catch(error => {
          console.error('Error sending message:', error);
          // Show error message
          const statusSpan = messageElement.querySelector('.text-xs.text-gray-400');
          if (statusSpan) {
            statusSpan.textContent = 'Failed to send';
            statusSpan.classList.remove('text-gray-400');
            statusSpan.classList.add('text-red-500');
          }
        });
      });
    }
  });
</script>
`) -%>