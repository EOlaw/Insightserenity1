<% layout('layouts/auth') -%>
<% block('title', 'Two-Factor Authentication - InsightSerenity') -%>

<div class="text-center md:text-left">
    <h1 class="text-2xl font-bold text-gray-800 mb-1">Two-Factor Authentication</h1>
    <p class="text-gray-600 mb-6">Please enter the verification code to complete your sign-in</p>
</div>

<!-- Two-Factor Authentication Form -->
<form action="/api/auth/verify-2fa" method="POST" class="space-y-6">
    <input type="hidden" name="sessionId" value="<%= typeof sessionId !== 'undefined' ? sessionId : '' %>">
    
    <div class="mb-6">
        <div class="bg-gray-50 p-4 rounded-lg border-l-4 border-primary mb-6">
            <div class="flex">
                <div class="flex-shrink-0">
                    <i data-lucide="shield" class="h-5 w-5 text-primary"></i>
                </div>
                <div class="ml-3">
                    <p class="text-sm text-gray-700">
                        A verification code has been sent to 
                        <% if (typeof emailMasked !== 'undefined' && emailMasked) { %>
                            <strong><%= emailMasked %></strong>
                        <% } else if (typeof phoneMasked !== 'undefined' && phoneMasked) { %>
                            <strong><%= phoneMasked %></strong>
                        <% } else { %>
                            your registered device
                        <% } %>
                    </p>
                </div>
            </div>
        </div>
        
        <label for="verificationCode" class="block text-sm font-medium text-gray-700 mb-1">Verification Code</label>
        <div class="flex justify-center">
            <div class="verification-code-container">
                <input type="text" inputmode="numeric" id="code1" class="verification-code-input text-center w-12 h-12 text-xl font-bold border border-gray-300 rounded-md mx-1 focus:ring-primary focus:border-primary" maxlength="1" autofocus>
                <input type="text" inputmode="numeric" id="code2" class="verification-code-input text-center w-12 h-12 text-xl font-bold border border-gray-300 rounded-md mx-1 focus:ring-primary focus:border-primary" maxlength="1">
                <input type="text" inputmode="numeric" id="code3" class="verification-code-input text-center w-12 h-12 text-xl font-bold border border-gray-300 rounded-md mx-1 focus:ring-primary focus:border-primary" maxlength="1">
                <input type="text" inputmode="numeric" id="code4" class="verification-code-input text-center w-12 h-12 text-xl font-bold border border-gray-300 rounded-md mx-1 focus:ring-primary focus:border-primary" maxlength="1">
                <input type="text" inputmode="numeric" id="code5" class="verification-code-input text-center w-12 h-12 text-xl font-bold border border-gray-300 rounded-md mx-1 focus:ring-primary focus:border-primary" maxlength="1">
                <input type="text" inputmode="numeric" id="code6" class="verification-code-input text-center w-12 h-12 text-xl font-bold border border-gray-300 rounded-md mx-1 focus:ring-primary focus:border-primary" maxlength="1">
            </div>
        </div>
        <input type="hidden" id="verificationCode" name="verificationCode">
        
        <!-- Countdown Timer -->
        <div class="flex justify-center mt-4">
            <div class="text-sm text-gray-500">
                Code expires in <span id="countdown" class="font-medium text-primary-dark">05:00</span>
            </div>
        </div>
    </div>
    
    <div>
        <button type="submit" id="verifyButton" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-base font-medium text-dark bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
            Verify
        </button>
    </div>
    
    <div class="text-center mt-6">
        <p class="text-sm text-gray-600">
            Didn't receive a code?
            <button type="button" id="resendCodeBtn" class="font-medium text-primary-dark hover:text-primary ml-1">
                Resend code
            </button>
        </p>
    </div>
    
    <div class="text-center">
        <a href="/api/auth/login" class="text-sm font-medium text-primary-dark hover:text-primary">
            Back to login
        </a>
    </div>
</form>

<!-- Alternative Authentication Methods -->
<div class="mt-8 pt-6 border-t border-gray-200">
    <h3 class="text-sm font-medium text-gray-700 mb-3">Alternative Authentication Methods</h3>
    
    <div class="space-y-3">
        <button type="button" id="authenticatorAppBtn" class="w-full flex items-center justify-between px-4 py-3 text-left border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
            <div class="flex items-center">
                <i data-lucide="smartphone" class="h-5 w-5 text-primary mr-3"></i>
                <span class="text-sm font-medium text-gray-700">Use Authenticator App</span>
            </div>
            <i data-lucide="chevron-right" class="h-5 w-5 text-gray-400"></i>
        </button>
        
        <button type="button" id="recoveryCodeBtn" class="w-full flex items-center justify-between px-4 py-3 text-left border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
            <div class="flex items-center">
                <i data-lucide="key" class="h-5 w-5 text-primary mr-3"></i>
                <span class="text-sm font-medium text-gray-700">Use Recovery Code</span>
            </div>
            <i data-lucide="chevron-right" class="h-5 w-5 text-gray-400"></i>
        </button>
    </div>
</div>

<% block('additionalJS', `
<script>
    // Auto-focus next input when a digit is entered
    document.addEventListener('DOMContentLoaded', function() {
        const inputs = document.querySelectorAll('.verification-code-input');
        const form = document.querySelector('form');
        const verificationCodeInput = document.getElementById('verificationCode');
        
        // Focus the first input
        if (inputs.length > 0) {
            inputs[0].focus();
        }
        
        inputs.forEach((input, index) => {
            // Move to next input when a digit is entered
            input.addEventListener('input', function() {
                if (this.value.length === 1) {
                    // Move to next input if available
                    if (index < inputs.length - 1) {
                        inputs[index + 1].focus();
                    }
                }
                
                // Combine all inputs into the hidden field
                updateVerificationCode();
            });
            
            // Handle backspace to move to previous input
            input.addEventListener('keydown', function(e) {
                if (e.key === 'Backspace' && this.value.length === 0) {
                    if (index > 0) {
                        inputs[index - 1].focus();
                    }
                }
            });
            
            // Allow only numbers
            input.addEventListener('keypress', function(e) {
                if (isNaN(e.key) || e.key === ' ') {
                    e.preventDefault();
                }
            });
            
            // Handle paste events to distribute across inputs
            input.addEventListener('paste', function(e) {
                e.preventDefault();
                
                // Get pasted content and remove non-digits
                const pasteData = (e.clipboardData || window.clipboardData)
                    .getData('text')
                    .replace(/[^0-9]/g, '')
                    .substring(0, inputs.length);
                
                if (!pasteData) return;
                
                // Distribute digits across inputs
                for (let i = 0; i < pasteData.length; i++) {
                    if (index + i < inputs.length) {
                        inputs[index + i].value = pasteData[i];
                        
                        // Focus the last filled input
                        if (i === pasteData.length - 1 && index + i < inputs.length - 1) {
                            inputs[index + i + 1].focus();
                        } else if (i === pasteData.length - 1) {
                            inputs[index + i].focus();
                        }
                    }
                }
                
                updateVerificationCode();
            });
        });
        
        // Update hidden verification code field
        function updateVerificationCode() {
            let code = '';
            inputs.forEach(input => {
                code += input.value;
            });
            verificationCodeInput.value = code;
            
            // Enable/disable submit button based on code completion
            document.getElementById('verifyButton').disabled = code.length !== inputs.length;
        }
        
        // Handle form submission
        form.addEventListener('submit', function(e) {
            let code = '';
            inputs.forEach(input => {
                code += input.value;
            });
            
            // Prevent submission if code is incomplete
            if (code.length !== inputs.length) {
                e.preventDefault();
                alert('Please enter the complete verification code.');
            }
        });
        
        // Countdown timer
        const countdownEl = document.getElementById('countdown');
        let timeLeft = 5 * 60; // 5 minutes in seconds
        
        function updateCountdown() {
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            
            countdownEl.textContent = \`\${minutes.toString().padStart(2, '0')}:\${seconds.toString().padStart(2, '0')}\`;
            
            if (timeLeft <= 0) {
                clearInterval(countdownInterval);
                countdownEl.textContent = '00:00';
                document.getElementById('resendCodeBtn').classList.remove('opacity-50', 'cursor-not-allowed');
                document.getElementById('resendCodeBtn').removeAttribute('disabled');
            } else {
                timeLeft--;
            }
        }
        
        const countdownInterval = setInterval(updateCountdown, 1000);
        
        // Handle resend code button
        const resendBtn = document.getElementById('resendCodeBtn');
        resendBtn.addEventListener('click', function() {
            if (this.hasAttribute('disabled')) return;
            
            // Disable button and show loading state
            this.setAttribute('disabled', 'true');
            this.classList.add('opacity-50', 'cursor-not-allowed');
            const originalText = this.textContent;
            this.textContent = 'Sending...';
            
            // Simulate API call to resend code
            setTimeout(() => {
                // Reset countdown
                timeLeft = 5 * 60;
                updateCountdown();
                
                // Show success message
                const alert = document.createElement('div');
                alert.className = 'bg-green-50 border-l-4 border-green-500 p-4 mb-4 rounded';
                alert.innerHTML = \`
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <i data-lucide="check-circle" class="h-5 w-5 text-green-500"></i>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm text-green-700">
                                Verification code resent successfully.
                            </p>
                        </div>
                    </div>
                \`;
                
                document.querySelector('form').prepend(alert);
                lucide.createIcons();
                
                // Reset button
                this.textContent = originalText;
                
                // Remove alert after 5 seconds
                setTimeout(() => {
                    alert.remove();
                }, 5000);
            }, 1500);
        });
        
        // Handle authenticator app button
        document.getElementById('authenticatorAppBtn').addEventListener('click', function() {
            window.location.href = '/api/auth/2fa/authenticator';
        });
        
        // Handle recovery code button
        document.getElementById('recoveryCodeBtn').addEventListener('click', function() {
            window.location.href = '/api/auth/2fa/recovery-code';
        });
    });
</script>
`) -%>