<% layout('layouts/auth') -%>
<% block('title', 'Login - InsightSerenity') -%>

<div class="text-center md:text-left">
    <h1 class="text-2xl font-bold text-gray-800 mb-1">Sign In</h1>
    <p class="text-gray-600 mb-6">Enter your credentials to access your account</p>
</div>

<!-- Login Form -->
<form action="/api/auth/login" method="POST" class="space-y-6">
    <div class="mb-4">
        <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
        <div class="relative">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <i data-lucide="mail" class="h-5 w-5 text-gray-400"></i>
            </div>
            <input type="email" id="email" name="email" required
                class="pl-10 w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary"
                placeholder="Enter your email address">
        </div>
    </div>
    
    <div class="mb-4">
        <div class="flex items-center justify-between">
            <label for="password" class="block text-sm font-medium text-gray-700">Password</label>
            <a href="/api/auth/forgot-password" class="text-sm text-primary-dark hover:text-primary">
                Forgot password?
            </a>
        </div>
        <div class="relative">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <i data-lucide="lock" class="h-5 w-5 text-gray-400"></i>
            </div>
            <input type="password" id="password" name="password" required
                class="pl-10 w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary"
                placeholder="Enter your password">
            <div class="absolute inset-y-0 right-0 pr-3 flex items-center cursor-pointer" id="togglePassword">
                <i data-lucide="eye" class="h-5 w-5 text-gray-400"></i>
            </div>
        </div>
    </div>
    
    <div class="flex items-center">
        <input type="checkbox" id="remember" name="remember"
            class="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded">
        <label for="remember" class="ml-2 block text-sm text-gray-700">
            Remember me
        </label>
    </div>
    
    <div>
        <button type="submit" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-base font-medium text-dark bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
            Sign In
        </button>
    </div>
    
    <div class="relative my-6">
        <div class="absolute inset-0 flex items-center">
            <div class="w-full border-t border-gray-300"></div>
        </div>
        <div class="relative flex justify-center text-sm">
            <span class="px-2 bg-white text-gray-500">Or continue with</span>
        </div>
    </div>
    
    <div class="grid grid-cols-1 gap-3">
        <a href="/api/auth/github" class="w-full flex items-center justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
            <i data-lucide="github" class="h-5 w-5 mr-2 text-gray-700"></i>
            <span>GitHub</span>
        </a>
        
        <button type="button" id="passkeyButton" class="w-full flex items-center justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
            <i data-lucide="fingerprint" class="h-5 w-5 mr-2 text-gray-700"></i>
            <span>Sign in with Passkey</span>
        </button>
    </div>
    
    <div class="text-center mt-6">
        <p class="text-sm text-gray-600">
            Don't have an account?
            <a href="/api/auth/register" class="font-medium text-primary-dark hover:text-primary">
                Sign up now
            </a>
        </p>
    </div>
</form>

<% block('additionalJS', `
<script>
    // Toggle password visibility
    document.getElementById('togglePassword').addEventListener('click', function() {
        const passwordInput = document.getElementById('password');
        const icon = this.querySelector('i');
        
        if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            icon.setAttribute('data-lucide', 'eye-off');
        } else {
            passwordInput.type = 'password';
            icon.setAttribute('data-lucide', 'eye');
        }
        
        lucide.createIcons();
    });
    
    // Passkey authentication
    document.getElementById('passkeyButton').addEventListener('click', async function() {
        try {
            // Request passkey login options from server
            const optionsResponse = await fetch('/api/auth/passkey/login/options', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            const options = await optionsResponse.json();
            
            if (!options.success) {
                throw new Error(options.message || 'Failed to get authentication options');
            }
            
            // Trigger browser's WebAuthn API
            const credential = await navigator.credentials.get({
                publicKey: options.data
            });
            
            // Verify with server
            const verifyResponse = await fetch('/api/auth/passkey/login/verify', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    credentialId: credential.id,
                    authenticatorData: {
                        id: credential.id,
                        rawId: Array.from(new Uint8Array(credential.rawId)),
                        response: {
                            authenticatorData: Array.from(new Uint8Array(credential.response.authenticatorData)),
                            clientDataJSON: Array.from(new Uint8Array(credential.response.clientDataJSON)),
                            signature: Array.from(new Uint8Array(credential.response.signature)),
                            userHandle: credential.response.userHandle ? Array.from(new Uint8Array(credential.response.userHandle)) : null
                        },
                        type: credential.type
                    }
                })
            });
            
            const verifyResult = await verifyResponse.json();
            
            if (verifyResult.success) {
                window.location.href = verifyResult.redirectUrl || '/dashboard';
            } else {
                throw new Error(verifyResult.message || 'Authentication failed');
            }
        } catch (error) {
            console.error('Passkey authentication error:', error);
            alert('Passkey authentication failed: ' + (error.message || 'Unknown error'));
        }
    });
</script>
`) -%>