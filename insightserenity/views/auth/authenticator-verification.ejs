<% layout('layouts/auth') -%>
<% block('title', 'Authenticator Verification - InsightSerenity') -%>

<div class="text-center md:text-left">
    <h1 class="text-2xl font-bold text-gray-800 mb-1">Authenticator App Verification</h1>
    <p class="text-gray-600 mb-6">Enter the code from your authenticator app to complete your sign-in</p>
</div>

<!-- Authenticator Verification Form -->
<form action="/api/auth/verify-authenticator" method="POST" class="space-y-6">
    <input type="hidden" name="sessionId" value="<%= typeof sessionId !== 'undefined' ? sessionId : '' %>">
    
    <div class="mb-6">
        <div class="bg-gray-50 p-4 rounded-lg border-l-4 border-primary mb-6">
            <div class="flex">
                <div class="flex-shrink-0">
                    <i data-lucide="smartphone" class="h-5 w-5 text-primary"></i>
                </div>
                <div class="ml-3">
                    <p class="text-sm text-gray-700">
                        Open your authenticator app (like Google Authenticator, Microsoft Authenticator, or Authy) and enter the 6-digit code for <strong>InsightSerenity</strong>.
                    </p>
                </div>
            </div>
        </div>
        
        <label for="authCode" class="block text-sm font-medium text-gray-700 mb-1">Authenticator Code</label>
        <div class="flex justify-center">
            <div class="verification-code-container">
                <input type="text" inputmode="numeric" id="code1" class="verification-code-input text-center w-12 h-12 text-xl font-bold border border-gray-300 rounded-md mx-1 focus:ring-primary focus:border-primary" maxlength="1" autofocus>
                <input type="text" inputmode="numeric" id="code2" class="verification-code-input text-center w-12 h-12 text-xl font-bold border border-gray-300 rounded-md mx-1 focus:ring-primary focus:border-primary" maxlength="1">
                <input type="text" inputmode="numeric" id="code3" class="verification-code-input text-center w-12 h-12 text-xl font-bold border border-gray-300 rounded-md mx-1 focus:ring-primary focus:border-primary" maxlength="1">
                <input type="text" inputmode="numeric" id="code4" class="verification-code-input text-center w-12 h-12 text-xl font-bold border border-gray-300 rounded-md mx-1 focus:ring-primary focus:border-primary" maxlength="1">
                <input type="text" inputmode="numeric" id="code5" class="verification-code-input text-center w-12 h-12 text-xl font-bold border border-gray-300 rounded-md mx-1 focus:ring-primary focus:border-primary" maxlength="1">
                <input type="text" inputmode="numeric" id="code6" class="verification-code-input text-center w-12 h-12 text-xl font-bold border border-gray-300 rounded-md mx-1 focus:ring-primary focus:border-primary" maxlength="1">
            </div>
        </div>
        <input type="hidden" id="authCode" name="authCode">
    </div>
    
    <div>
        <button type="submit" id="verifyButton" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-base font-medium text-dark bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
            Verify
        </button>
    </div>
    
    <div class="text-center mt-4">
        <a href="/api/auth/2fa" class="text-sm font-medium text-primary-dark hover:text-primary">
            Back to verification options
        </a>
    </div>
</form>

<!-- Need help section -->
<div class="mt-8 pt-6 border-t border-gray-200">
    <h3 class="text-sm font-medium text-gray-700 mb-3">Need Help?</h3>
    
    <div class="space-y-3 text-sm text-gray-600">
        <div class="flex items-start">
            <div class="flex-shrink-0 mt-0.5">
                <i data-lucide="refresh-cw" class="h-5 w-5 text-primary"></i>
            </div>
            <span class="ml-3">
                <strong class="font-medium text-gray-700">Time-based codes:</strong> 
                Authenticator codes refresh every 30 seconds. If you're having trouble, wait for a new code to appear and try again.
            </span>
        </div>
        
        <div class="flex items-start">
            <div class="flex-shrink-0 mt-0.5">
                <i data-lucide="clock" class="h-5 w-5 text-primary"></i>
            </div>
            <span class="ml-3">
                <strong class="font-medium text-gray-700">Check your clock:</strong> 
                Make sure your device's date and time are set to update automatically. Incorrect time settings can cause verification problems.
            </span>
        </div>
        
        <div class="flex items-start">
            <div class="flex-shrink-0 mt-0.5">
                <i data-lucide="key" class="h-5 w-5 text-primary"></i>
            </div>
            <span class="ml-3">
                <strong class="font-medium text-gray-700">Use a recovery code:</strong> 
                If you can't access your authenticator app, you can <a href="/api/auth/2fa/recovery-code" class="text-primary-dark hover:text-primary">use a recovery code</a> instead.
            </span>
        </div>
        
        <div class="flex items-start">
            <div class="flex-shrink-0 mt-0.5">
                <i data-lucide="help-circle" class="h-5 w-5 text-primary"></i>
            </div>
            <span class="ml-3">
                <strong class="font-medium text-gray-700">Contact support:</strong> 
                If you're still having trouble, please <a href="/support" class="text-primary-dark hover:text-primary">contact our support team</a> for assistance.
            </span>
        </div>
    </div>
</div>

<% block('additionalJS', `
<script>
    // Auto-focus next input when a digit is entered
    document.addEventListener('DOMContentLoaded', function() {
        const inputs = document.querySelectorAll('.verification-code-input');
        const form = document.querySelector('form');
        const authCodeInput = document.getElementById('authCode');
        
        // Focus the first input
        if (inputs.length > 0) {
            inputs[0].focus();
        }
        
        inputs.forEach((input, index) => {
            // Move to next input when a digit is entered
            input.addEventListener('input', function() {
                if (this.value.length === 1) {
                    // Move to next input if available
                    if (index < inputs.length - 1) {
                        inputs[index + 1].focus();
                    }
                }
                
                // Combine all inputs into the hidden field
                updateAuthCode();
            });
            
            // Handle backspace to move to previous input
            input.addEventListener('keydown', function(e) {
                if (e.key === 'Backspace' && this.value.length === 0) {
                    if (index > 0) {
                        inputs[index - 1].focus();
                    }
                }
            });
            
            // Allow only numbers
            input.addEventListener('keypress', function(e) {
                if (isNaN(e.key) || e.key === ' ') {
                    e.preventDefault();
                }
            });
            
            // Handle paste events to distribute across inputs
            input.addEventListener('paste', function(e) {
                e.preventDefault();
                
                // Get pasted content and remove non-digits
                const pasteData = (e.clipboardData || window.clipboardData)
                    .getData('text')
                    .replace(/[^0-9]/g, '')
                    .substring(0, inputs.length);
                
                if (!pasteData) return;
                
                // Distribute digits across inputs
                for (let i = 0; i < pasteData.length; i++) {
                    if (index + i < inputs.length) {
                        inputs[index + i].value = pasteData[i];
                        
                        // Focus the last filled input
                        if (i === pasteData.length - 1 && index + i < inputs.length - 1) {
                            inputs[index + i + 1].focus();
                        } else if (i === pasteData.length - 1) {
                            inputs[index + i].focus();
                        }
                    }
                }
                
                updateAuthCode();
            });
        });
        
        // Update hidden auth code field
        function updateAuthCode() {
            let code = '';
            inputs.forEach(input => {
                code += input.value;
            });
            authCodeInput.value = code;
            
            // Enable/disable submit button based on code completion
            document.getElementById('verifyButton').disabled = code.length !== inputs.length;
        }
        
        // Handle form submission
        form.addEventListener('submit', function(e) {
            let code = '';
            inputs.forEach(input => {
                code += input.value;
            });
            
            // Prevent submission if code is incomplete
            if (code.length !== inputs.length) {
                e.preventDefault();
                alert('Please enter the complete authenticator code.');
            }
        });
    });
</script>
`) -%>