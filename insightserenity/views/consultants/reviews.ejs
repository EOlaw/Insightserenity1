<!-- views/consultants/reviews.ejs -->
<% layout('layouts/dashboard') -%>
<% block('title', 'My Reviews - InsightSerenity') -%>

<!-- Page header -->
<div class="mb-6">
    <h1 class="text-2xl font-bold mb-2">My Reviews</h1>
    <p class="text-gray-600">Manage client feedback and testimonials</p>
</div>

<!-- Reviews summary card -->
<div class="bg-white rounded-lg shadow-sm overflow-hidden mb-6">
    <div class="px-6 py-5 border-b border-gray-200">
        <h2 class="text-lg font-medium text-gray-900">Review Summary</h2>
    </div>
    <div class="p-6">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            <!-- Rating overview -->
            <div class="flex items-center">
                <div class="pr-8 border-r border-gray-200">
                    <div class="text-6xl font-bold text-gray-900 text-center"><%= reviews && reviews.average ? reviews.average.toFixed(1) : '0.0' %></div>
                    <div class="mt-1 flex justify-center">
                        <% for (let i = 1; i <= 5; i++) { %>
                            <% if (reviews && i <= Math.floor(reviews.average)) { %>
                                <i data-lucide="star" class="h-5 w-5 text-yellow-400"></i>
                            <% } else if (reviews && i - reviews.average < 1 && i - reviews.average > 0) { %>
                                <i data-lucide="star-half" class="h-5 w-5 text-yellow-400"></i>
                            <% } else { %>
                                <i data-lucide="star" class="h-5 w-5 text-gray-300"></i>
                            <% } %>
                        <% } %>
                    </div>
                    <div class="mt-1 text-sm text-gray-500 text-center">Based on <%= reviews ? reviews.count : 0 %> reviews</div>
                </div>
                
                <div class="pl-8 flex-grow">
                    <% 
                        const categories = [
                            { name: 'Communication', key: 'communication' },
                            { name: 'Expertise', key: 'expertise' },
                            { name: 'Quality', key: 'quality' },
                            { name: 'Timeliness', key: 'timeliness' },
                            { name: 'Value', key: 'value' }
                        ];
                    %>
                    <% categories.forEach(category => { %>
                        <div class="mb-2">
                            <div class="flex justify-between text-sm">
                                <span class="text-gray-700"><%= category.name %></span>
                                <span class="font-medium text-gray-900">
                                    <%= reviews && reviews.breakdown && reviews.breakdown[category.key] ? reviews.breakdown[category.key].toFixed(1) : '0.0' %>
                                </span>
                            </div>
                            <div class="w-full bg-gray-200 rounded-full h-1.5 mt-1">
                                <div class="bg-primary h-1.5 rounded-full" style="width: <%= reviews && reviews.breakdown && reviews.breakdown[category.key] ? (reviews.breakdown[category.key] / 5 * 100) : 0 %>%"></div>
                            </div>
                        </div>
                    <% }); %>
                </div>
            </div>
            
            <!-- Review statistics -->
            <div class="grid grid-cols-2 gap-6">
                <div class="bg-gray-50 p-4 rounded-lg">
                    <h3 class="text-lg font-medium text-gray-900 mb-1"><%= reviews ? reviews.count : 0 %></h3>
                    <p class="text-sm text-gray-500">Total Reviews</p>
                </div>
                
                <div class="bg-gray-50 p-4 rounded-lg">
                    <h3 class="text-lg font-medium text-gray-900 mb-1"><%= reviews && reviews.featured ? reviews.featured.length : 0 %></h3>
                    <p class="text-sm text-gray-500">Featured Reviews</p>
                </div>
                
                <div class="bg-green-50 p-4 rounded-lg">
                    <h3 class="text-lg font-medium text-green-800 mb-1">
                        <%= reviews && reviews.count ? Math.round((reviews.breakdown.count5 + reviews.breakdown.count4) / reviews.count * 100) : 0 %>%
                    </h3>
                    <p class="text-sm text-green-600">Positive Reviews (4-5 ★)</p>
                </div>
                
                <div class="bg-red-50 p-4 rounded-lg">
                    <h3 class="text-lg font-medium text-red-800 mb-1">
                        <%= reviews && reviews.count ? Math.round((reviews.breakdown.count2 + reviews.breakdown.count1) / reviews.count * 100) : 0 %>%
                    </h3>
                    <p class="text-sm text-red-600">Negative Reviews (1-2 ★)</p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Filter and sort -->
<div class="bg-white rounded-lg shadow-sm p-4 mb-6">
    <div class="flex flex-col md:flex-row md:items-center gap-4">
        <div class="md:w-1/3">
            <label for="rating-filter" class="block text-sm font-medium text-gray-700 mb-1">Filter by Rating</label>
            <select id="rating-filter" class="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm rounded-md">
                <option value="">All Ratings</option>
                <option value="5">5 Stars Only</option>
                <option value="4">4 Stars Only</option>
                <option value="3">3 Stars Only</option>
                <option value="2">2 Stars Only</option>
                <option value="1">1 Star Only</option>
                <option value="4-5">4-5 Stars</option>
                <option value="1-3">1-3 Stars</option>
            </select>
        </div>
        
        <div class="md:w-1/3">
            <label for="response-filter" class="block text-sm font-medium text-gray-700 mb-1">Filter by Response</label>
            <select id="response-filter" class="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm rounded-md">
                <option value="">All Reviews</option>
                <option value="responded">Responded</option>
                <option value="not-responded">Not Responded</option>
            </select>
        </div>
        
        <div class="md:w-1/3">
            <label for="sort-by" class="block text-sm font-medium text-gray-700 mb-1">Sort By</label>
            <select id="sort-by" class="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm rounded-md">
                <option value="date-desc">Newest First</option>
                <option value="date-asc">Oldest First</option>
                <option value="rating-desc">Highest Rating</option>
                <option value="rating-asc">Lowest Rating</option>
            </select>
        </div>
    </div>
</div>

<!-- Reviews list -->
<div class="space-y-6">
    <% if (reviews && reviews.featured && reviews.featured.length > 0) { %>
        <% reviews.featured.forEach(review => { %>
            <div class="bg-white rounded-lg shadow-sm overflow-hidden review-item" data-rating="<%= review.rating %>" data-responded="<%= review.response ? 'true' : 'false' %>">
                <div class="p-6">
                    <div class="flex justify-between items-start mb-4">
                        <div class="flex items-start">
                            <% if (review.client && review.client.user && review.client.user.profile && review.client.user.profile.avatarUrl) { %>
                                <img src="<%= review.client.user.profile.avatarUrl %>" alt="<%= review.client.user.profile.firstName %>" class="h-10 w-10 rounded-full mr-4">
                            <% } else { %>
                                <div class="h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center text-gray-700 font-bold mr-4">
                                    <%= review.client ? (review.client.user.profile.firstName.charAt(0) + review.client.user.profile.lastName.charAt(0)) : '?' %>
                                </div>
                            <% } %>
                            <div>
                                <h3 class="text-base font-medium text-gray-900">
                                    <%= review.client ? `${review.client.user.profile.firstName} ${review.client.user.profile.lastName}` : 'Anonymous Client' %>
                                </h3>
                                <div class="flex items-center">
                                    <div class="flex">
                                        <% for (let i = 1; i <= 5; i++) { %>
                                            <i data-lucide="star" class="h-4 w-4 <%= i <= review.rating ? 'text-yellow-400' : 'text-gray-300' %>"></i>
                                        <% } %>
                                    </div>
                                    <span class="ml-2 text-sm text-gray-500">
                                        <%= new Date(review.date).toLocaleDateString() %>
                                    </span>
                                </div>
                                <% if (review.project) { %>
                                    <p class="text-sm text-gray-500 mt-1">
                                        Project: <a href="/consultants/projects/<%= review.project._id %>" class="text-primary-dark hover:text-primary"><%= review.project.title %></a>
                                    </p>
                                <% } %>
                            </div>
                        </div>
                        <div class="flex space-x-2">
                            <% if (review.featured) { %>
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                                    Featured
                                </span>
                            <% } %>
                            <button type="button" class="text-gray-400 hover:text-gray-500 focus:outline-none feature-toggle" data-review-id="<%= review._id %>" data-featured="<%= review.featured ? 'true' : 'false' %>">
                                <i data-lucide="<%= review.featured ? 'star-off' : 'star' %>" class="h-5 w-5"></i>
                            </button>
                        </div>
                    </div>
                    
                    <div class="mb-6">
                        <p class="text-gray-700"><%= review.comment %></p>
                    </div>
                    
                    <% if (review.rating <= 3 && !review.response) { %>
                        <div class="bg-yellow-50 border border-yellow-200 rounded-md p-4 mb-4">
                            <div class="flex">
                                <div class="flex-shrink-0">
                                    <i data-lucide="alert-triangle" class="h-5 w-5 text-yellow-400"></i>
                                </div>
                                <div class="ml-3">
                                    <h3 class="text-sm font-medium text-yellow-800">Attention Required</h3>
                                    <div class="mt-2 text-sm text-yellow-700">
                                        <p>This review has a rating of <%= review.rating %> stars and needs your response. Addressing feedback promptly can improve client satisfaction and your profile's reputation.</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    <% } %>
                    
                    <% if (review.response) { %>
                        <div class="bg-gray-50 rounded-md p-4">
                            <div class="flex items-start">
                                <div class="flex-shrink-0 mt-0.5">
                                    <i data-lucide="message-circle" class="h-5 w-5 text-gray-400"></i>
                                </div>
                                <div class="ml-3">
                                    <h4 class="text-sm font-medium text-gray-900">Your Response</h4>
                                    <div class="mt-2 text-sm text-gray-700">
                                        <p><%= review.response.comment %></p>
                                    </div>
                                    <div class="mt-2 text-xs text-gray-500">
                                        <%= new Date(review.response.date).toLocaleDateString() %>
                                    </div>
                                </div>
                            </div>
                        </div>
                    <% } else { %>
                        <form class="mt-4 respond-form" data-review-id="<%= review._id %>">
                            <div>
                                <label for="response-<%= review._id %>" class="block text-sm font-medium text-gray-700">Respond to this review</label>
                                <div class="mt-1">
                                    <textarea id="response-<%= review._id %>" name="response" rows="3" class="shadow-sm block w-full focus:ring-primary focus:border-primary sm:text-sm border border-gray-300 rounded-md" placeholder="Write your response..."></textarea>
                                </div>
                            </div>
                            <div class="mt-2 flex justify-end">
                                <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-dark bg-primary hover:bg-primary-dark">
                                    Post Response
                                </button>
                            </div>
                        </form>
                    <% } %>
                </div>
            </div>
        <% }); %>
    <% } else { %>
        <div class="bg-white rounded-lg shadow-sm p-6 text-center">
            <div class="mb-4">
                <i data-lucide="message-square" class="h-12 w-12 mx-auto text-gray-400"></i>
            </div>
            <h3 class="text-lg font-medium text-gray-900 mb-1">No reviews yet</h3>
            <p class="text-gray-500 mb-4">Complete projects with clients to start receiving reviews</p>
            <a href="/consultants/available-projects" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-dark bg-primary hover:bg-primary-dark">
                <i data-lucide="search" class="h-4 w-4 mr-2"></i>
                Find Projects
            </a>
        </div>
    <% } %>
</div>

<!-- Pagination (if needed) -->
<% if (reviews && reviews.featured && reviews.featured.length > 10) { %>
    <div class="mt-8">
        <nav class="flex justify-between items-center" aria-label="Pagination">
            <div class="flex-1 flex justify-between">
                <a href="#" class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                    Previous
                </a>
                <a href="#" class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                    Next
                </a>
            </div>
        </nav>
    </div>
<% } %>

<!-- Tips for managing reviews -->
<div class="mt-8 bg-blue-50 rounded-lg p-6">
    <h3 class="text-lg font-medium text-blue-900 mb-3">Tips for Managing Reviews</h3>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div class="flex">
            <div class="flex-shrink-0">
                <i data-lucide="check-circle" class="h-6 w-6 text-blue-700"></i>
            </div>
            <div class="ml-3">
                <h4 class="text-base font-medium text-blue-800">Respond Promptly</h4>
                <p class="text-sm text-blue-700">Respond to all reviews, especially negative ones, within 48 hours.</p>
            </div>
        </div>
        
        <div class="flex">
            <div class="flex-shrink-0">
                <i data-lucide="check-circle" class="h-6 w-6 text-blue-700"></i>
            </div>
            <div class="ml-3">
                <h4 class="text-base font-medium text-blue-800">Be Professional</h4>
                <p class="text-sm text-blue-700">Keep your responses professional and constructive, even for critical reviews.</p>
            </div>
        </div>
        
        <div class="flex">
            <div class="flex-shrink-0">
                <i data-lucide="check-circle" class="h-6 w-6 text-blue-700"></i>
            </div>
            <div class="ml-3">
                <h4 class="text-base font-medium text-blue-800">Feature Your Best</h4>
                <p class="text-sm text-blue-700">Feature reviews that showcase your expertise and client satisfaction.</p>
            </div>
        </div>
        
        <div class="flex">
            <div class="flex-shrink-0">
                <i data-lucide="check-circle" class="h-6 w-6 text-blue-700"></i>
            </div>
            <div class="ml-3">
                <h4 class="text-base font-medium text-blue-800">Learn and Improve</h4>
                <p class="text-sm text-blue-700">Use feedback to improve your services and client relationships.</p>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Filter and sort functionality
        const ratingFilter = document.getElementById('rating-filter');
        const responseFilter = document.getElementById('response-filter');
        const sortBy = document.getElementById('sort-by');
        const reviewItems = document.querySelectorAll('.review-item');
        
        // Apply filters and sorting
        function applyFilters() {
            const ratingValue = ratingFilter.value;
            const responseValue = responseFilter.value;
            const sortValue = sortBy.value;
            
            // Filter by rating
            reviewItems.forEach(item => {
                const rating = parseInt(item.getAttribute('data-rating'));
                const responded = item.getAttribute('data-responded') === 'true';
                
                let showByRating = true;
                let showByResponse = true;
                
                // Rating filter
                if (ratingValue) {
                    if (ratingValue.includes('-')) {
                        // Range like "4-5"
                        const [min, max] = ratingValue.split('-').map(Number);
                        showByRating = rating >= min && rating <= max;
                    } else {
                        // Single value like "5"
                        showByRating = rating === parseInt(ratingValue);
                    }
                }
                
                // Response filter
                if (responseValue === 'responded') {
                    showByResponse = responded;
                } else if (responseValue === 'not-responded') {
                    showByResponse = !responded;
                }
                
                // Show or hide based on filters
                if (showByRating && showByResponse) {
                    item.classList.remove('hidden');
                } else {
                    item.classList.add('hidden');
                }
            });
            
            // Sorting
            const reviewList = document.querySelector('.space-y-6');
            const reviewArray = Array.from(reviewItems);
            
            reviewArray.sort((a, b) => {
                // Sort by date or rating
                if (sortValue === 'date-desc') {
                    const dateA = new Date(a.querySelector('span.text-sm.text-gray-500').textContent.trim());
                    const dateB = new Date(b.querySelector('span.text-sm.text-gray-500').textContent.trim());
                    return dateB - dateA;
                } else if (sortValue === 'date-asc') {
                    const dateA = new Date(a.querySelector('span.text-sm.text-gray-500').textContent.trim());
                    const dateB = new Date(b.querySelector('span.text-sm.text-gray-500').textContent.trim());
                    return dateA - dateB;
                } else if (sortValue === 'rating-desc') {
                    const ratingA = parseInt(a.getAttribute('data-rating'));
                    const ratingB = parseInt(b.getAttribute('data-rating'));
                    return ratingB - ratingA;
                } else if (sortValue === 'rating-asc') {
                    const ratingA = parseInt(a.getAttribute('data-rating'));
                    const ratingB = parseInt(b.getAttribute('data-rating'));
                    return ratingA - ratingB;
                }
                
                return 0;
            });
            
            // Re-append sorted items
            reviewArray.forEach(item => {
                reviewList.appendChild(item);
            });
        }
        
        // Set up event listeners
        ratingFilter.addEventListener('change', applyFilters);
        responseFilter.addEventListener('change', applyFilters);
        sortBy.addEventListener('change', applyFilters);
        
        // Feature toggle functionality
        const featureToggles = document.querySelectorAll('.feature-toggle');
        featureToggles.forEach(toggle => {
            toggle.addEventListener('click', function() {
                const reviewId = this.getAttribute('data-review-id');
                const featured = this.getAttribute('data-featured') === 'true';
                
                // Toggle featured status (in a real app, you'd make an AJAX call here)
                console.log(`Toggling featured status for review ${reviewId} to ${!featured}`);
                
                // Update UI (this would normally happen after successful server response)
                this.setAttribute('data-featured', (!featured).toString());
                const icon = this.querySelector('i');
                if (featured) {
                    icon.setAttribute('data-lucide', 'star');
                } else {
                    icon.setAttribute('data-lucide', 'star-off');
                }
                
                // Re-initialize Lucide icons
                lucide.createIcons();
                
                // Toggle featured badge
                const reviewCard = this.closest('.review-item');
                const featuredBadge = reviewCard.querySelector('.bg-yellow-100');
                
                if (featured) {
                    // Remove badge
                    if (featuredBadge) {
                        featuredBadge.remove();
                    }
                } else {
                    // Add badge
                    if (!featuredBadge) {
                        const badgeHtml = `
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                                Featured
                            </span>
                        `;
                        this.parentNode.insertAdjacentHTML('afterbegin', badgeHtml);
                    }
                }
            });
        });
        
        // Response form submission
        const respondForms = document.querySelectorAll('.respond-form');
        respondForms.forEach(form => {
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const reviewId = this.getAttribute('data-review-id');
                const responseText = this.querySelector('textarea').value.trim();
                
                if (!responseText) {
                    alert('Please enter a response.');
                    return;
                }
                
                // In a real app, you'd submit the response to the server here
                console.log(`Submitting response for review ${reviewId}: ${responseText}`);
                
                // Update UI (this would normally happen after successful server response)
                const currentDate = new Date().toLocaleDateString();
                const responseHtml = `
                    <div class="bg-gray-50 rounded-md p-4">
                        <div class="flex items-start">
                            <div class="flex-shrink-0 mt-0.5">
                                <i data-lucide="message-circle" class="h-5 w-5 text-gray-400"></i>
                            </div>
                            <div class="ml-3">
                                <h4 class="text-sm font-medium text-gray-900">Your Response</h4>
                                <div class="mt-2 text-sm text-gray-700">
                                    <p>${responseText}</p>
                                </div>
                                <div class="mt-2 text-xs text-gray-500">
                                    ${currentDate}
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                // Replace form with response
                this.parentNode.innerHTML = responseHtml;
                
                // Re-initialize Lucide icons
                lucide.createIcons();
                
                // Update data attribute for filtering
                const reviewItem = document.querySelector(`.review-item[data-review-id="${reviewId}"]`);
                if (reviewItem) {
                    reviewItem.setAttribute('data-responded', 'true');
                }
                
                // Remove alert if present
                const alert = document.querySelector(`.review-item[data-review-id="${reviewId}"] .bg-yellow-50`);
                if (alert) {
                    alert.remove();
                }
            });
        });
    });
</script>